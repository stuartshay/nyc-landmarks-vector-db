#!/usr/bin/env python3
"""
Test script for request correlation functionality.

This script sends requests with custom correlation IDs to test the correlation feature.
"""

import time

import requests

API_BASE_URL = "https://vector-db.coredatastore.com"


def test_correlation_tracking() -> None:
    """Test request correlation with custom correlation IDs."""

    print("🔗 Testing Request Correlation Tracking")
    print("=" * 50)

    # Test 1: Request with custom correlation ID
    custom_correlation_id = f"test-correlation-{int(time.time())}"

    print("\n📍 Test 1: Custom Correlation ID")
    print(f"   Correlation ID: {custom_correlation_id}")

    headers = {
        "Content-Type": "application/json",
        "X-Request-ID": custom_correlation_id,  # Custom correlation ID
        "User-Agent": "CorrelationTestScript/1.0",
    }

    payload = {
        "query": "What is the history of correlation testing?",
        "source_type": "wikipedia",
        "top_k": 3,
    }

    try:
        response = requests.post(
            f"{API_BASE_URL}/api/query/search",
            json=payload,
            headers=headers,
            timeout=30,
        )

        print(f"   ✅ Response: {response.status_code}")
        print(f"   📊 Response time: {response.elapsed.total_seconds():.3f}s")

    except Exception as e:
        print(f"   ❌ Error: {e}")

    # Test 2: Request without correlation ID (auto-generated)
    print("\n📍 Test 2: Auto-generated Correlation ID")

    headers_no_id = {
        "Content-Type": "application/json",
        "User-Agent": "CorrelationTestScript/1.0",
    }

    payload2 = {
        "query": "Test without correlation ID",
        "source_type": "wikipedia",
        "top_k": 2,
    }

    try:
        response = requests.post(
            f"{API_BASE_URL}/api/query/search",
            json=payload2,
            headers=headers_no_id,
            timeout=30,
        )

        print(f"   ✅ Response: {response.status_code}")
        print(f"   📊 Response time: {response.elapsed.total_seconds():.3f}s")
        print("   🆔 Correlation ID will be auto-generated by middleware")

    except Exception as e:
        print(f"   ❌ Error: {e}")

    # Test 3: Multiple requests with same correlation ID
    shared_correlation_id = f"shared-test-{int(time.time())}"

    print("\n📍 Test 3: Multiple Requests with Shared Correlation ID")
    print(f"   Shared Correlation ID: {shared_correlation_id}")

    shared_headers = {
        "Content-Type": "application/json",
        "X-Correlation-ID": shared_correlation_id,  # Use different header
        "User-Agent": "CorrelationTestScript/1.0",
    }

    queries = [
        "First query in correlation group",
        "Second query in correlation group",
        "Third query in correlation group",
    ]

    for i, query in enumerate(queries, 1):
        payload = {"query": query, "source_type": "wikipedia", "top_k": 1}

        try:
            response = requests.post(
                f"{API_BASE_URL}/api/query/search",
                json=payload,
                headers=shared_headers,
                timeout=30,
            )

            print(
                f"   ✅ Request {i}: {response.status_code} ({response.elapsed.total_seconds():.3f}s)"
            )

        except Exception as e:
            print(f"   ❌ Request {i} Error: {e}")

        # Small delay between requests
        time.sleep(0.5)

    print("\n" + "=" * 50)
    print("🏁 Correlation Testing Completed!")
    print("\n📝 To view correlated logs, use these queries:")
    print(f"   Custom ID: jsonPayload.correlation_id=\"{custom_correlation_id}\"")
    print(f"   Shared ID: jsonPayload.correlation_id=\"{shared_correlation_id}\"")
    print("\n🔍 General correlation queries:")
    print("   All request bodies: jsonPayload.metric_type=\"request_body\"")
    print("   All timing logs: jsonPayload.metric_type=\"request_timing\"")
    print(
        "   Combined: (jsonPayload.metric_type=\"request_body\" OR jsonPayload.metric_type=\"request_timing\")"
    )


if __name__ == "__main__":
    test_correlation_tracking()
