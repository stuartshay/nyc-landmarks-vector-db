name: Pre-commit Checks

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches: [master]
  push:
    branches: [master]

permissions:
  contents: write
  pull-requests: write

jobs:
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    # Run on regular PRs OR Dependabot PRs (but not both for the same PR)
    if: |
      (github.event_name == 'pull_request' && github.actor != 'dependabot[bot]') ||
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]') ||
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # For pull_request_target events (Dependabot), checkout the PR head
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.ref }}
          # Use a token that can push back to the PR
          token: ${{ github.event_name == 'pull_request_target' && secrets.GITHUB_TOKEN || github.token }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.1"
          cache: "pip"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.10.3"

      - name: Install gitleaks
        run: |
          # Install gitleaks for secret scanning
          wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.21.4/gitleaks_8.21.4_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/
          rm gitleaks.tar.gz
          echo "‚úÖ Gitleaks installed successfully:"
          gitleaks version

      - name: Set up Docker
        run: |
          # Ensure Docker is available for hadolint (should be pre-installed)
          docker --version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pip install -r requirements.txt
          # Explicitly install all pre-commit hook dependencies
          pip install black isort flake8 flake8-docstrings flake8-quotes flake8-comprehensions mypy types-requests types-PyYAML bandit detect-secrets
          # Install mdformat and its dependencies using versions from .tool-versions for consistency
          MDFORMAT_VERSION=$(grep "^mdformat " .tool-versions | awk '{print $2}')
          MDFORMAT_GFM_VERSION=$(grep "^mdformat-gfm " .tool-versions | awk '{print $2}')
          MDFORMAT_BLACK_VERSION=$(grep "^mdformat-black " .tool-versions | awk '{print $2}')
          MDFORMAT_FRONTMATTER_VERSION=$(grep "^mdformat-frontmatter " .tool-versions | awk '{print $2}')
          MDFORMAT_FOOTNOTE_VERSION=$(grep "^mdformat-footnote " .tool-versions | awk '{print $2}')
          pip install "mdformat==$MDFORMAT_VERSION" "mdformat-gfm==$MDFORMAT_GFM_VERSION" "mdformat-black==$MDFORMAT_BLACK_VERSION" "mdformat-frontmatter==$MDFORMAT_FRONTMATTER_VERSION" "mdformat-footnote==$MDFORMAT_FOOTNOTE_VERSION"

      - name: Run pre-commit checks
        run: |
          # Install pre-commit hooks first
          pre-commit install-hooks

          # Debug information for troubleshooting
          echo "üîç Debug Information:"
          echo "Working directory: $(pwd)"
          echo "Git status:"
          git status --porcelain || echo "No git status changes"
          echo "Total files to scan: $(find . -type f | grep -v '\.git/' | grep -c .)"

          # Verify tools are available
          echo "üìã Tool Versions:"
          echo "gitleaks: $(gitleaks version)"
          echo "mdformat: $(mdformat --version)"

          # Test gitleaks configuration before full run
          echo "üß™ Testing gitleaks configuration:"
          gitleaks detect --source=. --config=.gitleaks.toml --no-git --exit-code=0 && echo "‚úÖ Gitleaks scan passed" || echo "‚ùå Gitleaks found issues"

          # Enhanced mdformat debugging with detailed logging
          echo "üîç Enhanced mdformat debugging:"
          echo "================================"

          # Show current working directory and permissions
          echo "üìÅ Working directory: $(pwd)"
          echo "üìã Directory permissions:"
          find . -maxdepth 1 -type f -exec ls -la {} \; | head -5

          # Show git configuration that might affect line endings
          echo "üîß Git configuration:"
          git config --get core.autocrlf || echo "core.autocrlf not set"
          git config --get core.eol || echo "core.eol not set"

          # Count and list all markdown files
          echo "üìÑ Markdown files analysis:"
          TOTAL_MD_FILES=$(find . -name "*.md" -not -path "./.venv/*" -not -path "./.git/*" | wc -l)
          echo "Total markdown files found: $TOTAL_MD_FILES"

          # Show first 10 markdown files with their sizes and permissions
          echo "üìù First 10 markdown files (with permissions and sizes):"
          find . -name "*.md" -not -path "./.venv/*" -not -path "./.git/*" -exec ls -la {} \; | head -10

          # Test mdformat on individual files with detailed output
          echo "üß™ Testing mdformat on individual files:"
          echo "========================================"

          # Test key files individually
          for file in README.md CONTRIBUTING.md docs/environment_setup.md memory-bank/activeContext.md; do
            if [ -f "$file" ]; then
              echo "Testing: $file"
              echo "  File size: $(wc -c < "$file") bytes"
              echo "  File permissions: $(ls -la "$file")"

              # Check if mdformat would modify this file
              if mdformat --check --wrap keep "$file" 2>&1; then
                echo "  ‚úÖ $file - No changes needed"
              else
                echo "  ‚ùå $file - Would be modified"
                echo "    Showing differences that would be made:"

                # Create a temporary file to show the diff
                TEMP_FILE=$(mktemp)
                mdformat --wrap keep "$file" --stdout > "$TEMP_FILE" 2>/dev/null || echo "    [Failed to format to temp file]"

                if [ -f "$TEMP_FILE" ]; then
                  echo "    Diff output:"
                  diff -u "$file" "$TEMP_FILE" | head -20 || echo "    [No diff output or files identical]"
                  rm -f "$TEMP_FILE"
                fi
              fi
              echo "  ---"
            else
              echo "File not found: $file"
            fi
          done

          # Test mdformat on directories
          echo "üèóÔ∏è Testing mdformat on directories:"
          echo "==================================="

          for dir in docs memory-bank; do
            if [ -d "$dir" ]; then
              echo "Testing directory: $dir"
              if mdformat --check --wrap keep "$dir"/ 2>&1; then
                echo "  ‚úÖ $dir/ - No changes needed"
              else
                echo "  ‚ùå $dir/ - Would be modified"
                echo "    Files in $dir that would be changed:"
                find "$dir" -name "*.md" -exec sh -c 'if ! mdformat --check --wrap keep "$1" 2>/dev/null; then echo "      - $1"; fi' _ {} \;
              fi
              echo "  ---"
            fi
          done

          # Show git status before pre-commit
          echo "üìä Git status before pre-commit:"
          git status --porcelain || echo "No changes in git status"

          # Test the exact pre-commit mdformat command
          echo "üéØ Testing exact pre-commit mdformat command:"
          echo "============================================="
          echo "Running: pre-commit run mdformat --all-files --verbose"

          # Run mdformat specifically first to see detailed output
          if pre-commit run mdformat --all-files --verbose; then
            echo "‚úÖ mdformat pre-commit hook passed"
          else
            echo "‚ùå mdformat pre-commit hook failed"
            echo "üìä Git status after mdformat:"
            git status --porcelain
            echo "üìù Files modified by mdformat:"
            git diff --name-only || echo "No files in git diff"
            echo "üîç Showing first few lines of diff for modified files:"
            git diff --unified=3 | head -50 || echo "No diff output"
          fi

          # Run all pre-commit checks
          echo "üöÄ Running all pre-commit checks:"
          pre-commit run --all-files

      # This step will automatically fix mdformat issues specifically
      - name: Auto-fix mdformat issues
        if: failure()
        run: |
          echo "üîß Attempting to auto-fix mdformat issues..."

          # Configure git for automated commits
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # Show current git status
          echo "üìä Current git status:"
          git status --porcelain

          # Run mdformat to fix formatting issues
          echo "üéØ Running mdformat to fix formatting..."
          mdformat --wrap keep docs/ memory-bank/ README.md CONTRIBUTING.md || echo "mdformat completed with some issues"

          # Show what changed
          echo "üìù Files modified by mdformat:"
          git status --porcelain

          # If there are changes, commit them
          if ! git diff --quiet; then
            echo "üíæ Committing mdformat fixes..."
            git add -A
            git commit -m "Auto-fix: Format Markdown files with mdformat - Applied consistent markdown formatting, fixed line wrapping and code block formatting. Automated fix by GitHub Actions CI." || echo "No changes to commit"

            # Push the changes back
            git push || echo "Failed to push changes"
            echo "‚úÖ mdformat fixes committed and pushed"
          else
            echo "‚ÑπÔ∏è No mdformat changes to commit"
          fi

      # This step will automatically fix other code formatting and linting issues
      - name: Fix other code formatting and linting issues
        if: failure()
        run: |
          pip install autoflake
          black nyc_landmarks tests
          autoflake --in-place --remove-all-unused-imports --recursive nyc_landmarks tests
          isort nyc_landmarks tests
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -u
          git commit -m "Fix code formatting and linting issues" || echo "No changes to commit"
          git push || echo "No changes to push"
