name: Pre-commit Checks

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [opened, synchronize, reopened]
    branches: [master]
  push:
    branches: [master]

permissions:
  contents: write
  pull-requests: write

jobs:
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    # Run on regular PRs OR Dependabot PRs (but not both for the same PR)
    if: |
      (github.event_name == 'pull_request' && github.actor != 'dependabot[bot]') ||
      (github.event_name == 'pull_request_target' && github.actor == 'dependabot[bot]') ||
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # For pull_request_target events (Dependabot), checkout the PR head
          ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || github.ref }}
          # Use a token that can push back to the PR
          token: ${{ github.event_name == 'pull_request_target' && secrets.GITHUB_TOKEN || github.token }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13.1"
          cache: "pip"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~1.10.3"

      - name: Install gitleaks
        run: |
          # Install gitleaks for secret scanning
          wget -O gitleaks.tar.gz https://github.com/gitleaks/gitleaks/releases/download/v8.21.4/gitleaks_8.21.4_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/
          rm gitleaks.tar.gz
          echo "✅ Gitleaks installed successfully:"
          gitleaks version

      - name: Set up Docker
        run: |
          # Ensure Docker is available for hadolint (should be pre-installed)
          docker --version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pip install -r requirements.txt
          # Explicitly install all pre-commit hook dependencies
          pip install black isort flake8 flake8-docstrings flake8-quotes flake8-comprehensions mypy types-requests types-PyYAML bandit detect-secrets
          # Install mdformat and its dependencies using versions from .tool-versions for consistency
          MDFORMAT_VERSION=$(grep "^mdformat " .tool-versions | awk '{print $2}')
          MDFORMAT_GFM_VERSION=$(grep "^mdformat-gfm " .tool-versions | awk '{print $2}')
          MDFORMAT_BLACK_VERSION=$(grep "^mdformat-black " .tool-versions | awk '{print $2}')
          MDFORMAT_FRONTMATTER_VERSION=$(grep "^mdformat-frontmatter " .tool-versions | awk '{print $2}')
          MDFORMAT_FOOTNOTE_VERSION=$(grep "^mdformat-footnote " .tool-versions | awk '{print $2}')
          pip install "mdformat==$MDFORMAT_VERSION" "mdformat-gfm==$MDFORMAT_GFM_VERSION" "mdformat-black==$MDFORMAT_BLACK_VERSION" "mdformat-frontmatter==$MDFORMAT_FRONTMATTER_VERSION" "mdformat-footnote==$MDFORMAT_FOOTNOTE_VERSION"

      - name: Run pre-commit checks
        run: |
          # Install pre-commit hooks first
          pre-commit install-hooks

          # Debug information for troubleshooting
          echo "🔍 Debug Information:"
          echo "Working directory: $(pwd)"
          echo "Git status:"
          git status --porcelain || echo "No git status changes"
          echo "Total files to scan: $(find . -type f | grep -v '\.git/' | grep -c .)"

          # Verify tools are available
          echo "📋 Tool Versions:"
          echo "gitleaks: $(gitleaks version)"
          echo "mdformat: $(mdformat --version)"

          # Test gitleaks configuration before full run
          echo "🧪 Testing gitleaks configuration:"
          gitleaks detect --source=. --config=.gitleaks.toml --no-git --exit-code=0 && echo "✅ Gitleaks scan passed" || echo "❌ Gitleaks found issues"

          # Debug mdformat before running pre-commit
          echo "🔍 Pre-mdformat file state:"
          find . -name "*.md" -not -path "./.venv/*" -not -path "./.git/*" -exec ls -la {} \; | head -10

          # Check what mdformat would change
          echo "🧪 Testing mdformat changes:"
          echo "Files that would be modified by mdformat:"

          # First, let's see what files mdformat is trying to process
          echo "All markdown files found:"
          find . -name "*.md" | head -20

          # Test mdformat on specific directories only (like local)
          echo "Testing mdformat on specific directories:"
          if ! mdformat --check --wrap keep docs/ memory-bank/ README.md CONTRIBUTING.md 2>&1; then
            echo "❌ mdformat check failed on specific directories"
          else
            echo "✅ mdformat check passed on specific directories"
          fi

          # Show git status before pre-commit
          echo "Git status before pre-commit:"
          git status --porcelain

          # Test individual files to find the problematic one
          for file in docs/*.md memory-bank/*.md README.md CONTRIBUTING.md; do
            if [ -f "$file" ]; then
              if ! mdformat --check --wrap keep "$file" 2>/dev/null; then
                echo "  📝 $file would be modified"
                echo "    Current content preview:"
                head -5 "$file" | sed 's/^/      /'
                echo "    After mdformat would be:"
                mdformat --wrap keep "$file" --stdout 2>/dev/null | head -5 | sed 's/^/      /' || echo "      [Failed to format]"
                echo "    ---"
              fi
            fi
          done

          # Run all pre-commit checks
          echo "🚀 Running pre-commit checks:"
          pre-commit run --all-files

      # This step will automatically fix code formatting and linting issues
      - name: Fix code formatting and linting issues
        if: failure()
        run: |
          pip install autoflake
          black nyc_landmarks tests
          autoflake --in-place --remove-all-unused-imports --recursive nyc_landmarks tests
          isort nyc_landmarks tests
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add -u
          git commit -m "Fix code formatting and linting issues" || echo "No changes to commit"
          git push || echo "No changes to push"
