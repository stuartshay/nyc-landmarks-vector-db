name: Process NYC Landmarks Data

on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      api_page_size:
        description: "Records per API page fetch"
        required: true
        default: "100"
      job_batch_size:
        description: "Number of API pages per parallel job"
        required: true
        default: "5"
      parallel_workers:
        description: "Number of parallel workers per job (0 for sequential)"
        required: true
        default: "2"
      recreate_index:
        description: "Recreate Pinecone index before processing? (true/false)"
        required: false
        default: "false"
      total_records:
        description: "Total number of landmark records to process (used for batching)"
        required: true
        default: "1765" # Update if the total changes significantly
      start_page_override:
        description: "Override start page number (leave empty to process from beginning)"
        required: false
        default: ""
      end_page_override:
        description: "Override end page number (leave empty to process to end)"
        required: false
        default: ""

jobs:
  build_image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        run: |
          IMAGE_NAME=ghcr.io/${{ github.repository_owner }}/nyc-landmarks-vector-db:latest
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

  generate_batches:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set_matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Generate processing matrix
        id: set_matrix
        run: |
          echo "Generating matrix..."

          # Build command with array for proper argument handling
          CMD=(
            "python" "scripts/ci/generate_matrix.py"
          )

          # Add optional parameters if provided
          if [[ -n "${{ github.event.inputs.total_records }}" ]]; then
            CMD+=("--total-records" "${{ github.event.inputs.total_records }}")
          fi

          # Add required parameters
          CMD+=(
            "--api-page-size" "${{ github.event.inputs.api_page_size }}"
            "--job-batch-size" "${{ github.event.inputs.job_batch_size }}"
          )

          # Add start page override if provided
          if [[ -n "${{ github.event.inputs.start_page_override }}" ]]; then
            CMD+=("--start-page-override" "${{ github.event.inputs.start_page_override }}")
            echo "Using start page override: ${{ github.event.inputs.start_page_override }}"
          fi

          # Add end page override if provided
          if [[ -n "${{ github.event.inputs.end_page_override }}" ]]; then
            CMD+=("--end-page-override" "${{ github.event.inputs.end_page_override }}")
            echo "Using end page override: ${{ github.event.inputs.end_page_override }}"
          fi

          # Execute the command
          MATRIX_JSON=$("${CMD[@]}")
          echo "Matrix JSON: $MATRIX_JSON"

          # Check if JSON is valid (basic check)
          if ! echo "$MATRIX_JSON" | python -c "import json, sys; json.load(sys.stdin)"; then
            echo "::error::Generated matrix JSON is invalid: $MATRIX_JSON"
            exit 1
          fi
          echo "matrix=$MATRIX_JSON" >> "$GITHUB_OUTPUT"

  process:
    needs: [build_image, generate_batches]
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.generate_batches.outputs.matrix) }}
    container:
      image: ghcr.io/${{ github.repository_owner }}/nyc-landmarks-vector-db:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test Pinecone DB Connectivity
        env:
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}
        run: |
          echo "Testing connection to Pinecone DB..."
          if ! python scripts/ci/test_pinecone_connection.py; then
            echo "Failed to connect to Pinecone DB. Exiting workflow."
            exit 1
          fi
          echo "Pinecone DB connection test completed successfully."

      - name: Run Landmark Processing Script for Batch (Pages ${{ matrix.start_page }}-${{ matrix.end_page }})
        env:
          PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
          COREDATASTORE_API_KEY: ${{ secrets.COREDATASTORE_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PINECONE_ENVIRONMENT: ${{ secrets.PINECONE_ENVIRONMENT }}
        run: |
          echo "Starting landmark processing for pages ${{ matrix.start_page }} to ${{ matrix.end_page }}..."

          # Build arguments individually to avoid issues with quoting
          START_PAGE="${{ matrix.start_page }}"
          END_PAGE="${{ matrix.end_page }}"
          PAGE_SIZE="${{ github.event.inputs.api_page_size }}"

          # Use array to properly handle arguments with spaces
          ARGS=(
            "--start-page" "$START_PAGE"
            "--end-page" "$END_PAGE"
            "--page-size" "$PAGE_SIZE"
          )

          WORKERS="${{ github.event.inputs.parallel_workers }}"
          if [[ "$WORKERS" -gt 0 ]]; then
            ARGS+=("--parallel" "--workers" "$WORKERS")
            echo "Using parallel mode with $WORKERS workers for this batch."
          else
            echo "Using sequential mode for this batch."
          fi

          if [[ "${{ github.event.inputs.recreate_index }}" == "true" ]]; then
             if [[ "${{ matrix.start_page }}" == "1" ]]; then
               echo "Adding --recreate-index for the first batch."
               ARGS+=("--recreate-index")
             else
               echo "Skipping --recreate-index for subsequent batches."
             fi
          fi

          # Use "${ARGS[@]}" to properly expand the array with all arguments
          python scripts/ci/process_landmarks.py "${ARGS[@]}"
          echo "Landmark processing finished for pages ${{ matrix.start_page }}-${{ matrix.end_page }}."
